snippet "clas?s?\ ?" "class ... end" rb
class ${1:class_name}
  $2
end
endsnippet

snippet 'cla?s?s?i ' "class initialize end" rb
class ${1:class_name}
  def initialize($2)
	  $3
  end
end
endsnippet

snippet do
do
  $0
end
endsnippet

snippet dov
do |$1|
  $0
end
endsnippet

snippet 'it\ ?('.*')?' "it ... end" rb
it '$1' do
  $2
end
endsnippet

snippet bef
before do
  $1
end
endsnippet

snippet aft
after do
  $1
end
endsnippet

snippet con
context '$1' do
  $2
end
endsnippet

snippet des
describe '$1' do
  $2
end
endsnippet

snippet let
let(:$1) { $2 }
endsnippet

snippet letd
let(:$1) do
  $2
end
endsnippet

snippet exp
expect($1)
endsnippet

snippet expb
expect { $1 }
endsnippet

snippet "subj?e?c?t?" "subject { ... }"
subject { $1 }
endsnippet

snippet "subb" "subject do ... end"
subject do
  $1
end
endsnippet

snippet def
def ${1:method_name}
  ${2:fail NotImplementedError}
end
endsnippet

snippet defs
def self.${1:method_name}
  ${2:fail NotImplementedError}
end
endsnippet

snippet defi
def initialize($1)
  $2
end
endsnippet

snippet if
if ${1:condition}
  $2
end
endsnippet

snippet ife
if ${1:condition}
  $2
else
  $3
end
endsnippet

snippet case
case ${1:object}
when ${2:condition}
  $3
end
endsnippet

snippet when
when ${1:condition}
  $2
end
endsnippet
