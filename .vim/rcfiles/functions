" vim:ft=vim
" Script to swap to the alternate file, vertically split, and reopen prev file
function! OpenAlternateWindowSplit()
  :e#
  :vsplit
  :e#
endfunction

" Open the vimrc in a vertical split
function! OpenVimrcSplit()
  :e ~/.vimrc
  :vsplit
  :e#
endfunction

" Functions to take the diff from target or merge, respectively
function! DiffUseTarget()
  :diffget //2
  :diffupdate
endfunction

function! DiffUseMerge()
  :diffget //3
  :diffupdate
endfunction

" Changes array of symbols to %i
function! ChangeToPercentI() range
  :call ChangeArrayToPercent("i", ":", a:firstline, a:lastline)
endfunction

" Change array from array of strings to %w
function! ChangeToPercentW() range
  :call ChangeArrayToPercent("w", "'", a:firstline, a:lastline)
endfunction

function! ChangeArrayToPercent(Type, Identifier, Firstline, Lastline)
  :execute a:Firstline . "," . a:Lastline . ('s/' . a:Identifier . '//e')
  :execute a:Firstline . "," . a:Lastline . 's/,//e'
  :execute a:Firstline . "," . a:Lastline . ('s/\[/%' . a:Type . '(/e')
  :execute a:Firstline . "," . a:Lastline . 's/]/)/e'
  :noh
endfunction

" Removes trailing whitespace
function! RemoveWhitespace()
  :%s/\s\+$//e
endfunction

" Removes the god awful formatting Leinecker uses in CS2...
function! RemoveAwfulFormatting()
  :%s/\t/  
  :%s/\s*$/
  :%s/( /(
  :%s/ )/)
  :%s/return(\(.*\));/return \1;
  " Attempts to remove the stupid Hungarian Notation. Note: it'll have to be
  " done for methods manually, as well as for the declaration of the property
  " itself
  :%s/m_n\?/this\./
endfunction

function! FixFile()
  :RuboCop -a
  normal! ''
endfunction

function! RemapMovement()
  if !exists('g:remapped_movement')
    let g:remapped_movement = 0
  endif
  if g:remapped_movement == 0
    let g:remapped_movement = 1
    nnoremap j +
    nnoremap k -
  elseif g:remapped_movement == 1
    let g:remapped_movement = 0
    nnoremap j gj
    nnoremap k gk
  endif
endfunction

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

if !exists( "*RubyEndToken" )
  function RubyEndToken()
    let current_line = getline( '.' )
    let braces_at_end = '{\s*\(|\(,\|\s\|\w\)*|\s*\)\?$'
    let stuff_without_do = '^\s*\(class\|if\|unless\|begin\|case\|for\|module\|while\|until\|def\)'
      let with_do = 'do\s*\(|\(,\|\s\|\w\)*|\s*\)\?$'

      if match(current_line, braces_at_end) >= 0
        return "\<CR>}\<C-O>O"
      elseif match(current_line, stuff_without_do) >= 0
        return "\<CR>end\<C-O>O"
      elseif match(current_line, with_do) >= 0
        return "\<CR>end\<C-O>O"
      else
        return "\<CR>"
      endif
    endfunction
endif

function! ToggleZeusTests()
  if !exists('g:remapped_zeus')
    let g:remapped_zeus = 0
  endif
  if g:remapped_zeus == 0
    let g:remapped_zeus = 1
    let g:rspec_command = "compiler rspec | set makeprg=zeus | Make rspec {spec}"
  else
    let g:remapped_zeus = 0
    let g:rspec_command = "Dispatch rspec {spec}"
  endif
endfunction

function! InitializeVariables()
  " Sets markers for the line above the method declaration
  " and at the end of the method declaration
  normal! majmbk

  " Copies the params into register a
  normal! 0f(l"ayi(

  " move to the end of the definition and 
  " paste the parameters
  normal! 'bO
  normal! "ap

  " Change the format to cache the variables
  :s/\(\w\+\)\(, \|$\)/@\1 = \1\r
  normal! ddk=ap

  " Move to the line above the declaration
  normal! 'aO

  " Write out the attr_accessors for the params
  normal! Sattr_reader 
  normal! "apo
  normal! k

  " Format the params as symbols
  :s/\(\w\+\(, \|$\)\)/:\1

  " finally, move back to the end of the declaration
  normal! 'b
endfunction
